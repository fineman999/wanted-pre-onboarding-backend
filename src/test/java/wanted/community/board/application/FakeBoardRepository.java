package wanted.community.board.application;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import wanted.community.board.application.port.BoardRepository;
import wanted.community.board.domain.Board;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

public class FakeBoardRepository implements BoardRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Board> data = new ArrayList<>();


    @Override
    public Board save(Board board) {
        if (board.getId() == null || board.getId() == 0) {
            Board newBoard = Board.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .title(board.getTitle())
                    .content(board.getContent())
                    .writer(board.getWriter())
                    .build();
            data.add(newBoard);
            return newBoard;
        }
        data.removeIf(item -> item.getId().equals(board.getId()));
        data.add(board);
        return board;
    }

    @Override
    public Page<Board> findAll(PageRequest pageRequest) {
        return null;
    }

    @Override
    public Board getById(Long id) {
        return data.stream()
                .filter(item -> item.getId().equals(id))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("해당하는 게시글이 없습니다."));
    }

    @Override
    public void deleteById(Long id) {
        data.removeIf(item -> item.getId().equals(id));
    }

    @Override
    public int update(Board board) {
        data.stream()
                .filter(item -> item.getId().equals(board.getId()))
                .map(item -> board)
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("해당하는 게시글이 없습니다."));
        return 1;


    }
}
