package wanted.community.user.mock;

import wanted.community.user.application.port.UserRepository;
import wanted.community.user.domain.Email;
import wanted.community.user.domain.Password;
import wanted.community.user.domain.User;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = new ArrayList<>();

    @Override
    public User create(User user) {
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(Email.of(user.getEmail()))
                    .password(Password.of(user.getPassword()))
                    .build();
            data.add(newUser);
            return newUser;
        }
        data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
        data.add(user);
        return user;
    }

    @Override
    public Optional<User> findByEmail(String email) {
        return data.stream()
                .filter(item -> Objects.equals(item.getEmail(), email))
                .findFirst();
    }

    @Override
    public User getByEmail(String email) {
        return findByEmail(email).orElseThrow(
                () -> new IllegalArgumentException("해당 이메일을 가진 유저가 없습니다.")
        );
    }
}
